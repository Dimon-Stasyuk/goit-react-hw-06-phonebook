{"version":3,"sources":["components/redux/contacts/contacts-actions.js","components/redux/contacts/contacts-reducers.js","components/redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["filterChange","createAction","removeContact","addContact","name","number","payload","id","shortid","generate","initialItemsState","JSON","parse","window","localStorage","getItem","filterReducer","createReducer","actions","_","itemsReducer","state","filter","contact","contactsReducer","combineReducers","items","store","configureStore","reducer","contacts","devTools","process","ContactForm","submit","useState","setName","setNumber","reset","handleInputChange","event","target","value","action","onSubmit","preventDefault","map","toLowerCase","includes","checkName","alert","type","onChange","pattern","title","required","className","Filter","ContactList","onClick","connect","dispatch","handleFilterChange","onAddContact","onRemoveContact","contactFilter","useEffect","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAGaA,EAAeC,YAAa,yBAE5BC,EAAgBD,YAAa,mBAE7BE,EAAaF,YAAa,gBAAgB,SAACG,EAAMC,GAAP,MAAmB,CACxEC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cCNEK,EAAiB,UAAGC,KAAKC,MAC7BC,OAAOC,aAAaC,QAAQ,oBADP,QAElB,CACH,CAAER,GAAI,OAAQH,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEE,GAAI,OAAQH,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEE,GAAI,OAAQH,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEE,GAAI,OAAQH,KAAM,iBAAkBC,OAAQ,cAG1CW,EAAgBC,YAAc,GAAD,eAChCC,GAAuB,SAACC,EAAD,YAAMb,YAG1Bc,EAAeH,YAAcP,GAAD,mBAC/BQ,GAAqB,SAACG,EAAD,OAAUf,EAAV,EAAUA,QAAV,4BAA4Be,GAA5B,CAAmCf,OADzB,cAE/BY,GAAwB,SAACG,EAAD,OAAUf,EAAV,EAAUA,QAAV,OACvBe,EAAMC,QAAO,SAACC,GAAD,OAAaA,EAAQhB,KAAOD,QAHX,IAWnBkB,EALSC,YAAgB,CACtCC,MAAON,EACPE,OAAQN,ICfKW,EAPDC,YAAe,CAC3BC,QAAS,CACPC,SAAUN,GAEZO,UAAUC,I,+BCJG,SAASC,EAAT,GAA4C,IAArBC,EAAoB,EAApBA,OAAQJ,EAAY,EAAZA,SAC5C,EAAwBK,mBAAS,IAAjC,mBAAO/B,EAAP,KAAagC,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAO9B,EAAP,KAAegC,EAAf,KAkBMC,EAAQ,WACZF,EAAQ,IACRC,EAAU,KAGNE,EAAoB,SAACC,GACzB,OAAQA,EAAMC,OAAOrC,MACnB,IAAK,OACHgC,EAAQI,EAAMC,OAAOC,OACrB,MACF,IAAK,SACHL,EAAUG,EAAMC,OAAOC,OACvB,MACF,QACE,SAIN,OACE,uBAAMC,OAAO,GAAGC,SA7BD,SAACJ,GAChBA,EAAMK,iBAPU,SAACzC,GACjB,OAAO0B,EACJgB,KAAI,SAACvB,GAAD,OAAaA,EAAQnB,KAAK2C,iBAC9BC,SAAS5C,EAAK2C,eAKbE,CAAU7C,GACZ8C,MAAM,GAAD,OAAI9C,EAAJ,8BAGP8B,EAAO9B,EAAMC,GACbiC,MAsBA,UACE,yCAEE,uBACEa,KAAK,OACL/C,KAAK,OACLgD,SAAUb,EACVG,MAAOtC,EACPiD,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEJ,KAAK,MACL/C,KAAK,SACLgD,SAAUb,EACVG,MAAOrC,EACPgD,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAASK,UAAU,MAAhC,4B,UCzCSC,EAvBA,SAAC,GAAyB,IAAvBf,EAAsB,EAAtBA,MAAOU,EAAe,EAAfA,SACvB,OACE,qBAAKI,UAAU,mBAAf,SACE,wBAAOA,UAAU,eAAjB,kCAEE,uBACEA,UAAU,eACVd,MAAOA,EACPU,SAAUA,EACVD,KAAK,OACL/C,KAAK,SACLmD,UAAQ,UCqBHG,G,MAjCK,SAAC,GAAiC,IAA/B5B,EAA8B,EAA9BA,SAAU5B,EAAoB,EAApBA,cAC/B,OACE,6BACG4B,EAASgB,KAAI,YAA2B,IAAxB1C,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,OAAQE,EAAS,EAATA,GAC7B,OACE,+BACE,uBAAMiD,UAAU,OAAhB,cAAyBpD,EAAzB,OACA,uBAAMoD,UAAU,MAAhB,cAAwBnD,KACxB,wBACE8C,KAAK,SACLK,UAAU,kBACVG,QAAS,kBAAMzD,EAAcK,IAH/B,0DAHOA,UC8BnB,IAWeqD,eAXS,SAACvC,GAAD,MAAY,CAClCS,SAAUT,EAAMS,SAASJ,MACzBJ,OAAQD,EAAMS,SAASR,WAGE,SAACuC,GAAD,MAAe,CACxCC,mBAAoB,SAACtB,GAAD,OAAWqB,EAAS7D,EAAawC,EAAMC,OAAOC,SAClEqB,aAAc,SAAC3D,EAAMC,GAAP,OAAkBwD,EAAS1D,EAAWC,EAAMC,KAC1D2D,gBAAiB,SAACzD,GAAD,OAAQsD,EAAS3D,EAAcK,QAGnCqD,EArCf,YAMI,IALF9B,EAKC,EALDA,SACAR,EAIC,EAJDA,OACAwC,EAGC,EAHDA,mBACAC,EAEC,EAFDA,aACAC,EACC,EADDA,gBAEMC,EAAgBnC,EAASR,QAAO,SAACC,GAAD,OACpCA,EAAQnB,KAAK2C,cAAcC,SAAS1B,EAAOyB,kBAO7C,OAJAmB,qBAAU,WACRrD,OAAOC,aAAaqD,QAAQ,WAAYxD,KAAKyD,UAAUtC,MACtD,CAACA,IAGF,sBAAK0B,UAAU,YAAf,UACE,4CACA,cAAC,EAAD,CAAa1B,SAAUA,EAAUI,OAAQ6B,IACzC,0CACA,cAAC,EAAD,CAAQrB,MAAOpB,EAAQ8B,SAAUU,IACjC,cAAC,EAAD,CAAahC,SAAUmC,EAAe/D,cAAe8D,UC1B3DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU5C,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ6C,SAASC,eAAe,W","file":"static/js/main.f13a859e.chunk.js","sourcesContent":["import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const filterChange = createAction(\"contacts/filterChange\");\r\n\r\nexport const removeContact = createAction(\"contacts/remove\");\r\n\r\nexport const addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nimport * as actions from \"./contacts-actions\";\r\n\r\nconst initialItemsState = JSON.parse(\r\n  window.localStorage.getItem(\"contacts\"),\r\n) ?? [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.filterChange]: (_, { payload }) => payload,\r\n});\r\n\r\nconst itemsReducer = createReducer(initialItemsState, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport \"./ContactForm.css\";\n\nexport default function ContactForm({ submit, contacts }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const checkName = (name) => {\n    return contacts\n      .map((contact) => contact.name.toLowerCase())\n      .includes(name.toLowerCase());\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (checkName(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    submit(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleInputChange = (event) => {\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.target.value);\n        break;\n      case \"number\":\n        setNumber(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form action='' onSubmit={onSubmit}>\n      <label>\n        Name\n        <input\n          type='text'\n          name='name'\n          onChange={handleInputChange}\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type='tel'\n          name='number'\n          onChange={handleInputChange}\n          value={number}\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n          required\n        />\n      </label>\n      <button type='submit' className='btn'>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  submit: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport \"./Filter.css\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className=\"filter-container\">\n      <label className=\"filter-lable\">\n        Find contacts by name\n        <input\n          className=\"filter-input\"\n          value={value}\n          onChange={onChange}\n          type=\"text\"\n          name=\"filter\"\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ contacts, removeContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <li key={id}>\n            <span className=\"name\"> {name}:</span>\n            <span className=\"tel\"> {number}</span>\n            <button\n              type=\"button\"\n              className=\"contact-btn btn\"\n              onClick={() => removeContact(id)}\n            >\n              Удалить\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import { useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport {\r\n  filterChange,\r\n  addContact,\r\n  removeContact,\r\n} from \"./components/redux/contacts/contacts-actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction App({\r\n  contacts,\r\n  filter,\r\n  handleFilterChange,\r\n  onAddContact,\r\n  onRemoveContact,\r\n}) {\r\n  const contactFilter = contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1>Phoneboock</h1>\r\n      <ContactForm contacts={contacts} submit={onAddContact} />\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onChange={handleFilterChange} />\r\n      <ContactList contacts={contactFilter} removeContact={onRemoveContact} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleFilterChange: (event) => dispatch(filterChange(event.target.value)),\r\n  onAddContact: (name, number) => dispatch(addContact(name, number)),\r\n  onRemoveContact: (id) => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./components/redux/store\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}